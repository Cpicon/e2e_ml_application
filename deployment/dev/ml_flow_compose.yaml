services:
    minio:
        restart: always
        image: minio/minio
        container_name: minio
        ports:
            - "9000:9000"
            - "9001:9001"
        command: server /data --address ':9000'
        environment:
            MINIO_ROOT_USER : ${AWS_ACCESS_KEY_ID}
            MINIO_ROOT_PASSWORD : ${AWS_SECRET_ACCESS_KEY}
            MINIO_VOLUMES: "/data"
            MINIO_STORAGE_USE_HTTPS: False
            MINIO_CONSOLE_ADDRESS: ${MINIO_CONSOLE_ADDRESS}
            MINIO_PORT: ${MINIO_PORT}
            MINIO_ACCESS_KEY: ${AWS_ACCESS_KEY_ID}
            MINIO_SECRET_KEY: ${AWS_SECRET_ACCESS_KEY}
        volumes:
            - minio_data:/data
        networks:
            - project_network
        healthcheck:
            test: [ "CMD", "mc", "ready", "local" ]
            interval: 5s
            timeout: 5s
            retries: 5

    mc:
        image: minio/mc
        depends_on:
            minio:
                condition: service_started
        container_name: mc
        env_file:
            - .env
        entrypoint: >
            /bin/sh -c "
            /tmp/wait-for-it.sh minio:9000 &&
            /usr/bin/mc alias set minio http://minio:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY} &&
            /usr/bin/mc config host add mlflow http://minio:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY} &&
            /usr/bin/mc mb minio/mlflow;
            exit 0;
            "
        networks:
            - dagster_network
        volumes:
            - ./wait-for-it.sh:/tmp/wait-for-it.sh

    debug:
        image: minio/minio
        container_name: debug
        command: tail -f /dev/null
        networks:
            - project_network

    mlflow_postgresql:
        restart: always
        image: postgres:latest
        container_name: mlflow_postgresql
        environment:
            POSTGRES_USER: ${MLFLOW_PG_USER}
            POSTGRES_PASSWORD: ${MLFLOW_PG_PWD}
            POSTGRES_DB: ${MLFLOW_DB}
        volumes:
            - dbdata:/var/lib/postgresql/data
        ports:
            - "5432:5432"
        networks:
            - project_network
        healthcheck:
            test: [ "CMD", "pg_isready", "-p", "5432", "-U", "${MLFLOW_PG_USER}" ]
            interval: 5s
            timeout: 5s
            retries: 3

    mlflow_tracking_server:
        restart: always
        build:
            context: ../..
            dockerfile: deployment/dev/Dockerfile_mlflow
        image: mlflow_tracking_server
        container_name: mlflow_tracking_server
        ports:
            - "5005:5005"
        environment:
            MLFLOW_S3_ENDPOINT_URL: ${MLFLOW_S3_ENDPOINT_URL}
            MLFLOW_S3_IGNORE_TLS: "True"
            MLFLOW_DB_BACKEND_URI: postgresql://${MLFLOW_PG_USER}:${MLFLOW_PG_PWD}@mlflow_tracking_server:5432/${MLFLOW_DB}
            AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
            AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
        entrypoint: mlflow server --backend-store-uri postgresql://${MLFLOW_PG_USER}:${MLFLOW_PG_PWD}@mlflow_postgresql:5432/${MLFLOW_DB} --default-artifact-root s3://mlflow/ --serve-artifacts --serve-artifacts --host 0.0.0.0:5005
        networks:
            - project_network
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://localhost:5000" ]
            interval: 30s
            timeout: 10s
            retries: 3
        depends_on:
            mlflow_postgresql:
                condition: service_healthy
            mc:
                condition: service_completed_successfully

volumes:
    dbdata:
    minio_data:

networks:
  project_network:
    driver: bridge
    name: project_network